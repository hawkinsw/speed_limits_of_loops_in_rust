00000000000051a0 <rust_linz::main>:
# Make room on the stack for locals.
    51a0:	41 57                	push   %r15
    51a2:	41 56                	push   %r14
    51a4:	53                   	push   %rbx
    51a5:	48 81 ec a0 00 00 00 	sub    $0xa0,%rsp

# Initialize the iteration value of the loop to 0
    51ac:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%rsp)
    51b3:	00 

# Call SystemTime::now() for the first time (iter_before)
    51b4:	ff 15 56 18 04 00    	callq  *0x41856(%rip)        # 46a10 <_GLOBAL_OFFSET_TABLE_+0x98>
    51ba:	49 89 c6             	mov    %rax,%r14
    51bd:	48 89 d3             	mov    %rdx,%rbx

# Initialize the upper bound of the loop
    51c0:	b8 00 65 cd 1d       	mov    $0x1dcd6500,%eax
    51c5:	66 2e 0f 1f 84 00 00 	nopw   %cs:0x0(%rax,%rax,1)
    51cc:	00 00 00 
    51cf:	90                   	nop
# LOOP_ITERATOR_BODY:
# Execute the loop of the body a pre-determined amount of times.
# This is a technique known as loop unrolling.
    51d0:	83 44 24 0c 01       	addl   $0x1,0xc(%rsp)
    51d5:	83 44 24 0c 01       	addl   $0x1,0xc(%rsp)
    51da:	83 44 24 0c 01       	addl   $0x1,0xc(%rsp)
    51df:	83 44 24 0c 01       	addl   $0x1,0xc(%rsp)
    51e4:	83 44 24 0c 01       	addl   $0x1,0xc(%rsp)
    51e9:	48 83 c0 fb          	add    $0xfffffffffffffffb,%rax
# If there is more loop to do, let's do it again
    51ed:	0f 85 dd ff ff ff    	jne    51d0 <rust_linz::main+0x30>
# If there is no more loop to do, record the time after
# by calling SystemTime::now() (iter_after)
    51f3:	ff 15 17 18 04 00    	callq  *0x41817(%rip)        # 46a10 <_GLOBAL_OFFSET_TABLE_+0x98>
    51f9:	48 89 44 24 60       	mov    %rax,0x60(%rsp)
    51fe:	48 89 54 24 68       	mov    %rdx,0x68(%rsp)

# Calculate the time between the two by calling duration_since
    5203:	48 8d 7c 24 10       	lea    0x10(%rsp),%rdi
    5208:	48 8d 74 24 60       	lea    0x60(%rsp),%rsi
    520d:	4c 89 f2             	mov    %r14,%rdx
    5210:	48 89 d9             	mov    %rbx,%rcx
    5213:	ff 15 2f 18 04 00    	callq  *0x4182f(%rip)        # 46a48 <_GLOBAL_OFFSET_TABLE_+0xd0>
# Check whether it returned successfully (expect())
    5219:	83 7c 24 10 01       	cmpl   $0x1,0x10(%rsp)
# If it did not, then call the handler (ITER_DURATION_SINCE_EXPECT_HANDLER).
    521e:	0f 84 46 01 00 00    	je     536a <rust_linz::main+0x1ca>
# If it did, convert the result to microseconds.
    5224:	8b 4c 24 20          	mov    0x20(%rsp),%ecx
    5228:	b8 40 42 0f 00       	mov    $0xf4240,%eax
    522d:	48 f7 64 24 18       	mulq   0x18(%rsp)
    5232:	48 69 c9 d3 4d 62 10 	imul   $0x10624dd3,%rcx,%rcx
    5239:	48 c1 e9 26          	shr    $0x26,%rcx
    523d:	48 01 c1             	add    %rax,%rcx
    5240:	48 83 d2 00          	adc    $0x0,%rdx
# Store the micro seconds between iter_before and iter_after (iter_total_time)
    5244:	48 89 4c 24 70       	mov    %rcx,0x70(%rsp)
    5249:	48 89 54 24 78       	mov    %rdx,0x78(%rsp)

# Reiniitialize the loop iteration variable to 0
    524e:	c7 44 24 0c 00 00 00 	movl   $0x0,0xc(%rsp)
    5255:	00 
    5256:	bb 00 65 cd 1d       	mov    $0x1dcd6500,%ebx

# Call SystemTime::now and store the result (while_before)
    525b:	ff 15 af 17 04 00    	callq  *0x417af(%rip)        # 46a10 <_GLOBAL_OFFSET_TABLE_+0x98>
    5261:	49 89 c7             	mov    %rax,%r15
    5264:	49 89 d6             	mov    %rdx,%r14
    5267:	66 0f 1f 84 00 00 00 	nopw   0x0(%rax,%rax,1)
    526e:	00 00 
# LOOP_WHILE_BODY:
# Looks eerily similar to the body of the iterator loop!!
    5270:	83 44 24 0c 01       	addl   $0x1,0xc(%rsp)
    5275:	83 44 24 0c 01       	addl   $0x1,0xc(%rsp)
    527a:	83 44 24 0c 01       	addl   $0x1,0xc(%rsp)
    527f:	83 44 24 0c 01       	addl   $0x1,0xc(%rsp)
    5284:	83 44 24 0c 01       	addl   $0x1,0xc(%rsp)
    5289:	48 83 c3 fb          	add    $0xfffffffffffffffb,%rbx
    528d:	75 e1                	jne    5270 <rust_linz::main+0xd0>

# Call SystemTime::now() a final time and store the result (while_after)
    528f:	ff 15 7b 17 04 00    	callq  *0x4177b(%rip)        # 46a10 <_GLOBAL_OFFSET_TABLE_+0x98>
    5295:	48 89 84 24 80 00 00 	mov    %rax,0x80(%rsp)
    529c:	00 
    529d:	48 89 94 24 88 00 00 	mov    %rdx,0x88(%rsp)
    52a4:	00 

# Do the duration_since/expect/as_micros dance again (see above)
# for the entire documentation of this code sequence.
    52a5:	48 8d 7c 24 10       	lea    0x10(%rsp),%rdi
    52aa:	48 8d b4 24 80 00 00 	lea    0x80(%rsp),%rsi
    52b1:	00 
    52b2:	4c 89 fa             	mov    %r15,%rdx
    52b5:	4c 89 f1             	mov    %r14,%rcx
    52b8:	ff 15 8a 17 04 00    	callq  *0x4178a(%rip)        # 46a48 <_GLOBAL_OFFSET_TABLE_+0xd0>
    52be:	83 7c 24 10 01       	cmpl   $0x1,0x10(%rsp)
    52c3:	0f 84 ca 00 00 00    	je     5393 <rust_linz::main+0x1f3>
    52c9:	8b 4c 24 20          	mov    0x20(%rsp),%ecx
    52cd:	b8 40 42 0f 00       	mov    $0xf4240,%eax
    52d2:	48 f7 64 24 18       	mulq   0x18(%rsp)
    52d7:	48 69 c9 d3 4d 62 10 	imul   $0x10624dd3,%rcx,%rcx
    52de:	48 c1 e9 26          	shr    $0x26,%rcx
    52e2:	48 01 c1             	add    %rax,%rcx
    52e5:	48 83 d2 00          	adc    $0x0,%rdx
    52e9:	48 89 8c 24 90 00 00 	mov    %rcx,0x90(%rsp)
    52f0:	00 
    52f1:	48 89 94 24 98 00 00 	mov    %rdx,0x98(%rsp)
    52f8:	00 

# Print the output line!
    52f9:	48 8d 84 24 90 00 00 	lea    0x90(%rsp),%rax
    5300:	00 
    5301:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
    5306:	48 8d 05 c3 bc 02 00 	lea    0x2bcc3(%rip),%rax        # 30fd0 <core::fmt::num::<impl core::fmt::Display for u128>::fmt>
    530d:	48 89 44 24 48       	mov    %rax,0x48(%rsp)
    5312:	48 8d 4c 24 70       	lea    0x70(%rsp),%rcx
    5317:	48 89 4c 24 50       	mov    %rcx,0x50(%rsp)
    531c:	48 89 44 24 58       	mov    %rax,0x58(%rsp)
    5321:	48 8d 05 90 f1 03 00 	lea    0x3f190(%rip),%rax        # 444b8 <anon.2712bc8ec9c14315ee8c58e99c323979.0.llvm.5696439534413760421+0x80>
    5328:	48 89 44 24 10       	mov    %rax,0x10(%rsp)
    532d:	48 c7 44 24 18 03 00 	movq   $0x3,0x18(%rsp)
    5334:	00 00 
    5336:	48 c7 44 24 20 00 00 	movq   $0x0,0x20(%rsp)
    533d:	00 00 
    533f:	48 8d 44 24 40       	lea    0x40(%rsp),%rax
    5344:	48 89 44 24 30       	mov    %rax,0x30(%rsp)
    5349:	48 c7 44 24 38 02 00 	movq   $0x2,0x38(%rsp)
    5350:	00 00 
    5352:	48 8d 7c 24 10       	lea    0x10(%rsp),%rdi
    5357:	ff 15 33 18 04 00    	callq  *0x41833(%rip)        # 46b90 <_GLOBAL_OFFSET_TABLE_+0x218>
    535d:	48 81 c4 a0 00 00 00 	add    $0xa0,%rsp
    5364:	5b                   	pop    %rbx
    5365:	41 5e                	pop    %r14
    5367:	41 5f                	pop    %r15
    5369:	c3                   	retq   
# Code to handle the failed expect after the calls to duration_since()
# ITER_DURATION_SINCE_EXPECT_HANDLER:
# The code to handle the failed expect after the duration_since() during
# the calculation of the results of the iterator loop.
    536a:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
    536f:	8b 4c 24 20          	mov    0x20(%rsp),%ecx
    5373:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
    5378:	89 4c 24 48          	mov    %ecx,0x48(%rsp)
    537c:	48 8d 3d 7d 1c 03 00 	lea    0x31c7d(%rip),%rdi        # 37000 <_fini+0xd1c>
    5383:	48 8d 0d de f0 03 00 	lea    0x3f0de(%rip),%rcx        # 44468 <anon.2712bc8ec9c14315ee8c58e99c323979.0.llvm.5696439534413760421+0x30>
    538a:	4c 8d 05 f7 f0 03 00 	lea    0x3f0f7(%rip),%r8        # 44488 <anon.2712bc8ec9c14315ee8c58e99c323979.0.llvm.5696439534413760421+0x50>
    5391:	eb 27                	jmp    53ba <rust_linz::main+0x21a>

# WHILE_DURATION_SINCE_EXPECT_HANDLER:
# The code to handle the failed expect after the duration_since() during
# the calculation of the results of the while loop.
    5393:	48 8b 44 24 18       	mov    0x18(%rsp),%rax
    5398:	8b 4c 24 20          	mov    0x20(%rsp),%ecx
    539c:	48 89 44 24 40       	mov    %rax,0x40(%rsp)
    53a1:	89 4c 24 48          	mov    %ecx,0x48(%rsp)
    53a5:	48 8d 3d 54 1c 03 00 	lea    0x31c54(%rip),%rdi        # 37000 <_fini+0xd1c>
    53ac:	48 8d 0d b5 f0 03 00 	lea    0x3f0b5(%rip),%rcx        # 44468 <anon.2712bc8ec9c14315ee8c58e99c323979.0.llvm.5696439534413760421+0x30>
    53b3:	4c 8d 05 e6 f0 03 00 	lea    0x3f0e6(%rip),%r8        # 444a0 <anon.2712bc8ec9c14315ee8c58e99c323979.0.llvm.5696439534413760421+0x68>
    53ba:	48 8d 54 24 40       	lea    0x40(%rsp),%rdx
    53bf:	be 02 00 00 00       	mov    $0x2,%esi
    53c4:	ff 15 0e 18 04 00    	callq  *0x4180e(%rip)        # 46bd8 <_GLOBAL_OFFSET_TABLE_+0x260>
    53ca:	0f 0b                	ud2    
    53cc:	0f 1f 40 00          	nopl   0x0(%rax)
